---
# PLAY PARA CONFIGURACAO DA VM
- hosts: all
  name: Configurando a VM
  remote_user: vagrant
  become: yes
  vars:
    docker_compose_version: "1.29.2"

  tasks:
 
    - name: copiar chave ssh
      authorized_key:
        user: vagrant
        state: present
        key: "{{ lookup('file', '/home/alan/.ssh/id_rsa.pub') }}"


    - name: Ajustando Timezone
      timezone:
        name: America/Sao_Paulo

    - name: Gerar Chave SSH
      openssh_keypair:
        path: /home/vagrant/.ssh/id_rsa
        owner: vagrant
        group: vagrant

    - name: Update apt cache
      apt: update_cache=yes cache_valid_time=3600        

#    - name: Ajustando o Arquivo de Configuração do Ansible
#      replace:
#        path: /etc/ansible/ansible.cfg
#        regexp: '^#host_key_checking = True'
#        replace: 'host_key_checking = False'

    - name: Instalação de Pacotes
      apt:
        update_cache: yes
        pkg:
          - vim
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - git
          - git-flow
          - ansible
          - sshpass
          - gnupg-agent
          - software-properties-common
          - python3-pip
          - python3-setuptools
          - mlocate
          - net-tools
          - tree
          
    - name: Check if ufw package is installed (on Ubuntu).
      command: service ufw status
      args:
        warn: false
      register: ufw_installed
      ignore_errors: true
      changed_when: false
      when:
        - ansible_distribution == "Ubuntu"
        - firewall_disable_ufw
      check_mode: false    

    - name: Disable the ufw firewall (on Ubuntu, if configured).
      service:
        name: ufw
        state: stopped
        enabled: false
      when:
        - ansible_distribution == "Ubuntu"
        - firewall_disable_ufw
        - ufw_installed.rc == 0

    - name: sysctl settings
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        state: present
        sysctl_set: yes
        reload: yes
      with_items:
        - { name: 'net.ipv4.ip_forward', value: '1' }
        - { name: 'net.ipv6.conf.all.forwarding', value: '1' }
        - { name: 'net.ipv4.conf.all.send_redirects', value: '0' }


    - name: Adicionando a GPG key do Docker
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add apt repository for stable version
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable
        state: present


    - name: Instalando o Docker
      apt:
        name: "{{ item }}"
        state: present
        update_cache: yes
      loop:
        - docker-ce
        - docker-ce-cli
        - containerd.io


    - name: Adicionado o User docker ao grupo vagrant
      user:
        name: vagrant
        append: yes
        group: docker

    - name: Iniciar o Docker Service
      service:
        name: docker
        state: started
        enabled: yes

    - name: Add remote "vagrant" user to "docker" group
      remote_user: vagrant
      user:
        name: "vagrant"
        group: "docker"
        append: yes

    - name: Add remote "jenkins" user to "docker" group
      remote_user: jenkins
      user:
        name: "jenkins"
        group: "docker"
        append: yes
   

    - name: Instalando o docker-compose 
      remote_user: vagrant
      get_url: 
        url : https://github.com/docker/compose/releases/download/{{ docker_compose_version }}/docker-compose-Linux-x86_64
        dest: /usr/local/bin/docker-compose
        mode: 'u+x,g+x'  


    # REQUIRED PACKAGES FOR USING ANSIBLE DOCKER (for portainer installation below)
    - name: Install related Ubuntu packages
      apt:
        name: "{{ packages }}"
        state: latest
      vars:
        packages:
          - python3-pip
          - mc

    - name: Install python packages
      pip:
        name: docker


    # https://docs.ansible.com/ansible/latest/collections/community/docker/docker_container_module.html#ansible-collections-community-docker-docker-container-module
    - name: Create portainer container
      docker_container:
        name: portainer
        image: portainer/portainer-ce
        state: started
        recreate: yes
        restart_policy: always
        published_ports:
          - "8000:8000"
          - "9000:9000"
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock
          - portainer_data:/data

    - name: Deploy Watchtower
      docker_container:
        name: watchtower
        state: started
        recreate: yes
        image: containrrr/watchtower
        command: --schedule "0 0 4 * * *" --debug
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock
          - /etc/passwd:/etc/passwd:ro
          - /etc/group:/etc/group:ro
        restart_policy: always  
#        published_ports:
#          - "7080:7080" 

    - name: Create Folder for Jenkins
      file: 
        path: /home/$USER/jenkins-data/jenkins_home
        owner: 1000 
        group: 1000 
        mode: 0755 
        state: directory



    - name: Deploy Jenkins CSI 
      docker_container:
        name: root
        image: alanaguinaga/jenkins:latest
        published_ports:
          - "0.0.0.0:5000:5000"
          - "50000:50000"
        state: started
        recreate: yes
        restart_policy: always  
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock
          - /home/vagrant/jenkins-data/jenkins_home:/var/jenkins_home
          - /etc/passwd:/etc/passwd:ro
          - /etc/group:/etc/group:ro



    # FIREWALL SETUP
#    - name: Open Portainer port
#      ufw:
#        state: enabled
#        rule: allow
#        port: "9000"
#        proto: tcp

#    - name: Open SSH port
#      ufw:
#        state: enabled
#        rule: allow
#        port: "22"
#        proto: tcp